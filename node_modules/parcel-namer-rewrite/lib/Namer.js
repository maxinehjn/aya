"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugin = require("@parcel/plugin");

var _Config = require("./Config");

var _logger = require("@parcel/logger");

var _crypto = _interopRequireDefault(require("crypto"));

var _utils = require("@parcel/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CONFIG = Symbol.for('parcel-plugin-config'); // noinspection JSUnusedGlobalSymbols

var _default = new _plugin.Namer({
  config: _Config.Config | undefined,
  delegate: null,

  async name(opts) {
    const config = this.ensureConfig(opts.options, opts.logger);

    if (!config) {
      return null;
    }

    const nameFromSuper = await this.delegate.name(opts);

    if (nameFromSuper != null && !config.disable) {
      return this.rewrite(opts.bundle, opts.bundleGraph, opts.options, nameFromSuper, opts.logger);
    }

    return nameFromSuper;
  },

  ensureConfig(options, logger) {
    if (!this.config) {
      const projectRoot = options.projectRoot;
      const packageManager = options.packageManager;
      const env = options.env;
      const profiles = options.mode;
      const config = new _Config.Config();
      config.loadFromPackageFolder(projectRoot, env, profiles, logger);

      if (!config.chain) {
        throw Error('No chain namer has been found in project. Set package.json#parcel-namer-rewrite:chain to set a delegate namer ("@parcel/namer-default" by default)');
      }

      const delegatePackage = packageManager.load(config.chain, projectRoot);

      if (!delegatePackage) {
        throw Error(`'Package ${config.delegate}' is not available. Set package.json#parcel-namer-rewrite:chain to set a delegate namer ("@parcel/namer-default" by default)`);
      }

      const delegate = delegatePackage.default[CONFIG];

      if (!delegate) {
        throw Error(`Package '${config.delegate}' has been found, but it's not a namer. Set package.json#parcel-namer-rewrite:chain to set a delegate namer ("@parcel/namer-default" by default)`);
      }

      this.delegate = delegate;
      this.config = config;
    }

    return this.config;
  },

  async getBundleHash(bundle) {
    if (this.config.hashing === 'never') return '';

    if (this.config.useParcelHash && bundle.hashReference) {
      return bundle.hashReference;
    }

    if (this.config.hashing !== 'always') return '';
    let assets = [];
    bundle.traverseAssets(asset => assets.push(asset));

    let hash = _crypto.default.createHash('md5');

    for (let i = 0; i < assets.length; ++i) {
      const asset = assets[i];

      if (asset.filePath) {
        const fileHash = await (0, _utils.md5FromFilePath)(asset.fs, asset.filePath);
        hash.update([asset.filePath, fileHash].join(':'));
      }
    }

    return hash.digest('hex').substring(0, 6);
  },

  async rewrite(bundle, bundleGraph, options, superName, logger) {
    const neverHashing = this.config.hashing === 'never';

    function superNameWithoutHashReference() {
      return bundle.hashReference ? superName.replace("." + bundle.hashReference, "") : superName;
    }

    const rule = this.config.selectRule(superName);

    if (!rule) {
      return neverHashing ? superNameWithoutHashReference() : superName;
    }

    const bundleHash = await this.getBundleHash(bundle, options);
    const rewrite = superNameWithoutHashReference().replace(rule.test, rule.to).replace(/{(.?)hash(.?)}/, !neverHashing && bundleHash.length > 0 ? `$1${bundleHash}$2` : '');

    if (this.config.silent !== true) {
      logger.info({
        message: `Rewrite ${superName} -> ${rewrite}`
      });
    }

    return rewrite;
  }

});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
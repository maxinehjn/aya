"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Config = void 0;

var _logger = require("@parcel/logger");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PACKAGE_JSON_SECTION = "parcel-namer-rewrite";

class Config {
  /**
   * Disable in development
   */

  /**
   * Name hashing
   */
  // "never", "always"

  /**
   * Disable logging names
   */

  /**
   * Use file name hashes from parcel
   */
  constructor() {
    _defineProperty(this, "profileEnvKey", 'PARCEL-NAMER-REWRITE-PROFILE');

    _defineProperty(this, "rules", void 0);

    _defineProperty(this, "chain", void 0);

    _defineProperty(this, "disable", false);

    _defineProperty(this, "hashing", '');

    _defineProperty(this, "silent", false);

    _defineProperty(this, "useParcelHash", true);

    this.chain = '@parcel/namer-default';
    this.rules = [];
  }

  loadFromPackageFolder(rootFolder, env, defaultProfiles, logger) {
    const packageJson = _fs.default.readFileSync(_path.default.join(rootFolder, 'package.json')).toString();

    const packageInfo = JSON.parse(packageJson);
    const packageSection = packageInfo[PACKAGE_JSON_SECTION];

    if (!packageSection) {
      logger.warn({
        message: `no "${PACKAGE_JSON_SECTION}" section in package.json. Use no-rules config`
      });
      return;
    }

    this._loadFromPackageSection(packageSection, logger);

    let profileNames = '';
    if (defaultProfiles) profileNames += ',' + defaultProfiles;
    if (this.profileEnvKey in env) profileNames += ',' + env[this.profileEnvKey];
    const profileSections = packageSection['profiles'];

    if (profileSections) {
      profileNames.split(/[,]/).map(profile => profileSections[profile]).filter(profile => !!profile).forEach(profile => {
        this._loadFromPackageSection(profile, logger);
      });
    }
  }

  _loadFromPackageSection(section, logger) {
    if (!section) return;

    if ('profile-env-key' in section) {
      this.profileEnvKey = section['profile-env-key'];
    }

    if ('chain' in section) {
      this.chain = section.chain;
    }

    if ('neverHashing' in section) {
      this.neverHashing = !!section.neverHashing;
    }

    this.silent = 'silent' in section && section.silent;

    if ('useParcelHash' in section) {
      this.useParcelHash = !!section.useParcelHash;
    }

    if ('rules' in section) {
      Object.keys(section.rules).forEach(k => {
        const ruleData = section.rules[k];
        const ruleTo = typeof ruleData === 'string' ? ruleData : null;

        if (ruleTo === null) {
          logger.warn(`No "to" rule for test "${k}" `);
          return;
        }

        this.rules.push({
          test: new RegExp(k),
          to: ruleTo
        });
      });
    }

    if ('developmentHashing' in section) {
      throw Error(`The "developmentHashing" option is not supported any more. Add "development" profile and set {"hashing": "never"} there. See documentation for details here: https://github.com/ol-loginov/parcel-namer-rewrite`);
    }

    if ('developmentDisable' in section) {
      throw Error(`The "developmentDisable" option is not supported any more. Add "development" profile and set {"disable": false} there. See documentation for details here: https://github.com/ol-loginov/parcel-namer-rewrite`);
    }

    if ('hashing' in section) {
      this.hashing = section['hashing'];
    }

    if ('disable' in section) {
      this.disable = !!section['disable'];
    }
  }

  selectRule(name) {
    const matches = this.rules.map(rule => rule.test.test(name) ? rule : null).filter(rule => rule != null);

    if (matches.length > 0) {
      return matches[0];
    }

    return null;
  }

}

exports.Config = Config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db25maWcuanMiXSwibmFtZXMiOlsiUEFDS0FHRV9KU09OX1NFQ1RJT04iLCJDb25maWciLCJjb25zdHJ1Y3RvciIsImNoYWluIiwicnVsZXMiLCJsb2FkRnJvbVBhY2thZ2VGb2xkZXIiLCJyb290Rm9sZGVyIiwiZW52IiwiZGVmYXVsdFByb2ZpbGVzIiwibG9nZ2VyIiwicGFja2FnZUpzb24iLCJmcyIsInJlYWRGaWxlU3luYyIsInBhdGgiLCJqb2luIiwidG9TdHJpbmciLCJwYWNrYWdlSW5mbyIsIkpTT04iLCJwYXJzZSIsInBhY2thZ2VTZWN0aW9uIiwid2FybiIsIm1lc3NhZ2UiLCJfbG9hZEZyb21QYWNrYWdlU2VjdGlvbiIsInByb2ZpbGVOYW1lcyIsInByb2ZpbGVFbnZLZXkiLCJwcm9maWxlU2VjdGlvbnMiLCJzcGxpdCIsIm1hcCIsInByb2ZpbGUiLCJmaWx0ZXIiLCJmb3JFYWNoIiwic2VjdGlvbiIsIm5ldmVySGFzaGluZyIsInNpbGVudCIsInVzZVBhcmNlbEhhc2giLCJPYmplY3QiLCJrZXlzIiwiayIsInJ1bGVEYXRhIiwicnVsZVRvIiwicHVzaCIsInRlc3QiLCJSZWdFeHAiLCJ0byIsIkVycm9yIiwiaGFzaGluZyIsImRpc2FibGUiLCJzZWxlY3RSdWxlIiwibmFtZSIsIm1hdGNoZXMiLCJydWxlIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLG9CQUFvQixHQUFHLHNCQUE3Qjs7QUFFTyxNQUFNQyxNQUFOLENBQWE7QUFLaEI7QUFDSjtBQUNBOztBQUVJO0FBQ0o7QUFDQTtBQUNpQjs7QUFDYjtBQUNKO0FBQ0E7O0FBRUk7QUFDSjtBQUNBO0FBR0lDLEVBQUFBLFdBQVcsR0FBRztBQUFBLDJDQXJCRSw4QkFxQkY7O0FBQUE7O0FBQUE7O0FBQUEscUNBZEosS0FjSTs7QUFBQSxxQ0FWSixFQVVJOztBQUFBLG9DQU5MLEtBTUs7O0FBQUEsMkNBRkUsSUFF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O0FBQ1pDLFVBQUFBLElBQUksRUFBRSxJQUFJQyxNQUFKLENBQVdMLENBQVgsQ0FETTtBQUVaTSxVQUFBQSxFQUFFLEVBQUVKO0FBRlEsU0FBaEI7QUFJSCxPQVpEO0FBYUg7O0FBRUQsUUFBSSx3QkFBd0JSLE9BQTVCLEVBQXFDO0FBQ2pDLFlBQU1hLEtBQUssQ0FBRSxpTkFBRixDQUFYO0FBQ0g7O0FBRUQsUUFBSSx3QkFBd0JiLE9BQTVCLEVBQXFDO0FBQ2pDLFlBQU1hLEtBQUssQ0FBRSwrTUFBRixDQUFYO0FBQ0g7O0FBRUQsUUFBSSxhQUFhYixPQUFqQixFQUEwQjtBQUN0QixXQUFLYyxPQUFMLEdBQWVkLE9BQU8sQ0FBQyxTQUFELENBQXRCO0FBQ0g7O0FBQ0QsUUFBSSxhQUFhQSxPQUFqQixFQUEwQjtBQUN0QixXQUFLZSxPQUFMLEdBQWUsQ0FBQyxDQUFDZixPQUFPLENBQUMsU0FBRCxDQUF4QjtBQUNIO0FBQ0o7O0FBRURnQixFQUFBQSxVQUFVLENBQUNDLElBQUQsRUFBaUM7QUFDdkMsVUFBTUMsT0FBTyxHQUFHLEtBQUs3QyxLQUFMLENBQ1h1QixHQURXLENBQ1B1QixJQUFJLElBQUlBLElBQUksQ0FBQ1QsSUFBTCxDQUFVQSxJQUFWLENBQWVPLElBQWYsSUFBdUJFLElBQXZCLEdBQThCLElBRC9CLEVBRVhyQixNQUZXLENBRUpxQixJQUFJLElBQUlBLElBQUksSUFBSSxJQUZaLENBQWhCOztBQUdBLFFBQUlELE9BQU8sQ0FBQ0UsTUFBUixHQUFpQixDQUFyQixFQUF3QjtBQUNwQixhQUFPRixPQUFPLENBQUMsQ0FBRCxDQUFkO0FBQ0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0g7O0FBcEhlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQbHVnaW5Mb2dnZXJ9IGZyb20gJ0BwYXJjZWwvbG9nZ2VyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuY29uc3QgUEFDS0FHRV9KU09OX1NFQ1RJT04gPSBcInBhcmNlbC1uYW1lci1yZXdyaXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuICAgIHByb2ZpbGVFbnZLZXkgPSAnUEFSQ0VMLU5BTUVSLVJFV1JJVEUtUFJPRklMRSdcblxuICAgIHJ1bGVzOiBOYW1lclJ1bGVbXVxuICAgIGNoYWluOiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIGluIGRldmVsb3BtZW50XG4gICAgICovXG4gICAgZGlzYWJsZSA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogTmFtZSBoYXNoaW5nXG4gICAgICovXG4gICAgaGFzaGluZyA9ICcnIC8vIFwibmV2ZXJcIiwgXCJhbHdheXNcIlxuICAgIC8qKlxuICAgICAqIERpc2FibGUgbG9nZ2luZyBuYW1lc1xuICAgICAqL1xuICAgIHNpbGVudCA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogVXNlIGZpbGUgbmFtZSBoYXNoZXMgZnJvbSBwYXJjZWxcbiAgICAgKi9cbiAgICB1c2VQYXJjZWxIYXNoID0gdHJ1ZVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2hhaW4gPSAnQHBhcmNlbC9uYW1lci1kZWZhdWx0JztcbiAgICAgICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgIH1cblxuICAgIGxvYWRGcm9tUGFja2FnZUZvbGRlcihyb290Rm9sZGVyOiBzdHJpbmcsIGVudjoge30sIGRlZmF1bHRQcm9maWxlczogc3RyaW5nW10sIGxvZ2dlcjogUGx1Z2luTG9nZ2VyKSB7XG4gICAgICAgIGNvbnN0IHBhY2thZ2VKc29uID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihyb290Rm9sZGVyLCAncGFja2FnZS5qc29uJykpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHBhY2thZ2VJbmZvID0gSlNPTi5wYXJzZShwYWNrYWdlSnNvbik7XG4gICAgICAgIGNvbnN0IHBhY2thZ2VTZWN0aW9uID0gcGFja2FnZUluZm9bUEFDS0FHRV9KU09OX1NFQ1RJT05dO1xuICAgICAgICBpZiAoIXBhY2thZ2VTZWN0aW9uKSB7XG4gICAgICAgICAgICBsb2dnZXIud2Fybih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYG5vIFwiJHtQQUNLQUdFX0pTT05fU0VDVElPTn1cIiBzZWN0aW9uIGluIHBhY2thZ2UuanNvbi4gVXNlIG5vLXJ1bGVzIGNvbmZpZ2BcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb2FkRnJvbVBhY2thZ2VTZWN0aW9uKHBhY2thZ2VTZWN0aW9uLCBsb2dnZXIpO1xuXG4gICAgICAgIGxldCBwcm9maWxlTmFtZXMgPSAnJztcbiAgICAgICAgaWYgKGRlZmF1bHRQcm9maWxlcykgcHJvZmlsZU5hbWVzICs9ICcsJyArIGRlZmF1bHRQcm9maWxlc1xuICAgICAgICBpZiAodGhpcy5wcm9maWxlRW52S2V5IGluIGVudikgcHJvZmlsZU5hbWVzICs9ICcsJyArIGVudlt0aGlzLnByb2ZpbGVFbnZLZXldXG5cbiAgICAgICAgY29uc3QgcHJvZmlsZVNlY3Rpb25zID0gcGFja2FnZVNlY3Rpb25bJ3Byb2ZpbGVzJ107XG4gICAgICAgIGlmIChwcm9maWxlU2VjdGlvbnMpIHtcbiAgICAgICAgICAgIHByb2ZpbGVOYW1lcy5zcGxpdCgvWyxdLylcbiAgICAgICAgICAgICAgICAubWFwKHByb2ZpbGUgPT4gcHJvZmlsZVNlY3Rpb25zW3Byb2ZpbGVdKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIocHJvZmlsZSA9PiAhIXByb2ZpbGUpXG4gICAgICAgICAgICAgICAgLmZvckVhY2gocHJvZmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRGcm9tUGFja2FnZVNlY3Rpb24ocHJvZmlsZSwgbG9nZ2VyKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2xvYWRGcm9tUGFja2FnZVNlY3Rpb24oc2VjdGlvbiwgbG9nZ2VyOiBQbHVnaW5Mb2dnZXIpIHtcbiAgICAgICAgaWYgKCFzZWN0aW9uKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCdwcm9maWxlLWVudi1rZXknIGluIHNlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMucHJvZmlsZUVudktleSA9IHNlY3Rpb25bJ3Byb2ZpbGUtZW52LWtleSddO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdjaGFpbicgaW4gc2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jaGFpbiA9IHNlY3Rpb24uY2hhaW47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ25ldmVySGFzaGluZycgaW4gc2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5uZXZlckhhc2hpbmcgPSAhIXNlY3Rpb24ubmV2ZXJIYXNoaW5nXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNpbGVudCA9ICdzaWxlbnQnIGluIHNlY3Rpb24gJiYgc2VjdGlvbi5zaWxlbnQ7XG5cbiAgICAgICAgaWYgKCd1c2VQYXJjZWxIYXNoJyBpbiBzZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnVzZVBhcmNlbEhhc2ggPSAhIXNlY3Rpb24udXNlUGFyY2VsSGFzaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgncnVsZXMnIGluIHNlY3Rpb24pIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNlY3Rpb24ucnVsZXMpLmZvckVhY2goayA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZURhdGEgPSBzZWN0aW9uLnJ1bGVzW2tdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJ1bGVUbyA9IHR5cGVvZiBydWxlRGF0YSA9PT0gJ3N0cmluZycgPyBydWxlRGF0YSA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bGVUbyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihgTm8gXCJ0b1wiIHJ1bGUgZm9yIHRlc3QgXCIke2t9XCIgYCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJ1bGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKGspLFxuICAgICAgICAgICAgICAgICAgICB0bzogcnVsZVRvXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2RldmVsb3BtZW50SGFzaGluZycgaW4gc2VjdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFRoZSBcImRldmVsb3BtZW50SGFzaGluZ1wiIG9wdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGFueSBtb3JlLiBBZGQgXCJkZXZlbG9wbWVudFwiIHByb2ZpbGUgYW5kIHNldCB7XCJoYXNoaW5nXCI6IFwibmV2ZXJcIn0gdGhlcmUuIFNlZSBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWxzIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9vbC1sb2dpbm92L3BhcmNlbC1uYW1lci1yZXdyaXRlYClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnZGV2ZWxvcG1lbnREaXNhYmxlJyBpbiBzZWN0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgVGhlIFwiZGV2ZWxvcG1lbnREaXNhYmxlXCIgb3B0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYW55IG1vcmUuIEFkZCBcImRldmVsb3BtZW50XCIgcHJvZmlsZSBhbmQgc2V0IHtcImRpc2FibGVcIjogZmFsc2V9IHRoZXJlLiBTZWUgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscyBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vb2wtbG9naW5vdi9wYXJjZWwtbmFtZXItcmV3cml0ZWApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2hhc2hpbmcnIGluIHNlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuaGFzaGluZyA9IHNlY3Rpb25bJ2hhc2hpbmcnXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2Rpc2FibGUnIGluIHNlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZSA9ICEhc2VjdGlvblsnZGlzYWJsZSddO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0UnVsZShuYW1lOiBzdHJpbmcpOiBOYW1lclJ1bGUgfCBudWxsIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHRoaXMucnVsZXNcbiAgICAgICAgICAgIC5tYXAocnVsZSA9PiBydWxlLnRlc3QudGVzdChuYW1lKSA/IHJ1bGUgOiBudWxsKVxuICAgICAgICAgICAgLmZpbHRlcihydWxlID0+IHJ1bGUgIT0gbnVsbCk7XG4gICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYW1lclJ1bGUge1xuICAgIHRlc3Q6IFJlZ0V4cDtcbiAgICB0bzogc3RyaW5nO1xufVxuIl19